generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int             @id @default(autoincrement())
  userName        String
  zipcode         String
  prefecture      String
  city            String
  houseNumber     String
  building        String?
  familyName      String
  firstName       String
  familyNameKana  String
  firstNameKana   String
  mailAddress     String
  password        String
  favoriteId      Int?
  passwordTest    String
  carts           Cart[]
  rentalHistories RentalHistory[]
  category        Category?       @relation(fields: [favoriteId], references: [categoryId])
}

model Item {
  itemId         Int      @id @default(autoincrement())
  fesName        String
  artist         String
  itemDetail     String
  itemImage      String
  releaseDate    DateTime
  playTime       Int
  twoDaysPrice   Int
  sevenDaysPrice Int
  categories     Int[]
  keywords       String[]
  carts          Cart[]
  reviews        Review[]
}

model Category {
  categoryId    Int             @id @default(autoincrement())
  categoryName  String
  chatbotAnswer ChatbotAnswer[]
  user          User[]
}

model Review {
  reviewId    Int     @id @default(autoincrement())
  itemId      Int
  userId      Int
  postTime    String
  reviewTitle String
  reviewText  String
  evaluation  Int
  spoiler     Boolean
  item        Item    @relation(fields: [itemId], references: [itemId])
}

model RentalHistory {
  rentalHistoryId Int       @id @default(autoincrement())
  userId          Int
  itemId          Int
  itemName        String
  price           Int
  itemImage       String
  rentalPeriod    Int
  payDate         DateTime
  rentalStart     DateTime?
  rentalEnd       DateTime?
  users           User      @relation(fields: [userId], references: [userId])
}

model Cart {
  cartId       Int  @id @default(autoincrement())
  userId       Int
  rentalPeriod Int
  itemId       Int
  items        Item @relation(fields: [itemId], references: [itemId])
  users        User @relation(fields: [userId], references: [userId])
}

model Chatbot {
  chatbotId     Int             @id @default(autoincrement())
  text          String?
  continue      Boolean
  option        String
  chatbotChoice ChatbotChoice[]
}

model ChatbotChoice {
  chatbotChoiceId Int     @default(autoincrement())
  chatbotId       Int
  text            String
  Chatbot         Chatbot @relation(fields: [chatbotId], references: [chatbotId])

  @@unique([chatbotChoiceId, chatbotId])
}

model ChatbotAnswer {
  question1  Int
  question2  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [categoryId])

  @@unique([question1, question2])
}
